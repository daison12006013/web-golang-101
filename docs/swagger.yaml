definitions:
  auth.LoginInput:
    properties:
      email:
        example: john.doe@gmail.com
        type: string
      password:
        example: 1234qwer
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterInput:
    properties:
      email:
        example: john.doe@gmail.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: 1234qwer
        type: string
      password_confirm:
        example: 1234qwer
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - password_confirm
    type: object
  utils.Response:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
info:
  contact: {}
  title: Web Golang 101 API
paths:
  /api-keys:
    get:
      consumes:
      - application/json
      description: Get API Key Lists
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: API Key Lists
      tags:
      - API Keys
    post:
      consumes:
      - application/json
      description: Generate API Key
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: API Key Generate
      tags:
      - API Keys
  /api-keys/{key}:
    delete:
      consumes:
      - application/json
      description: Delete API Key
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: API Key Delete
      tags:
      - API Keys
  /login:
    post:
      consumes:
      - application/json
      description: Login to the system
      parameters:
      - description: Login Input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Login
      tags:
      - Auth
  /refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Refresh Token
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Register Input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Register
      tags:
      - Auth
  /verify-email/{token}:
    get:
      consumes:
      - application/json
      description: Verify email
      parameters:
      - description: Token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Verify Email
      tags:
      - Auth
swagger: "2.0"

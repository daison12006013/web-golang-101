// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: users_query.sql

package queries

import (
	"context"
	"database/sql"
)

const findByEmail = `-- name: FindByEmail :one
select id, first_name, last_name, email, email_hash, email_verified_at, password, created_at, updated_at, deleted_at from users where email_hash = $1 and deleted_at is null
`

func (q *Queries) FindByEmail(ctx context.Context, emailHash string) (User, error) {
	row := q.db.QueryRowContext(ctx, findByEmail, emailHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.EmailHash,
		&i.EmailVerifiedAt,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
insert into users (email, email_hash, password, first_name, last_name) values ($1, $2, $3, $4, $5)
`

type InsertUserParams struct {
	Email     string
	EmailHash string
	Password  string
	FirstName sql.NullString
	LastName  sql.NullString
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser,
		arg.Email,
		arg.EmailHash,
		arg.Password,
		arg.FirstName,
		arg.LastName,
	)
	return err
}

const updateVerifiedAt = `-- name: UpdateVerifiedAt :exec
update users set email_verified_at = now() where email_hash = $1
`

func (q *Queries) UpdateVerifiedAt(ctx context.Context, emailHash string) error {
	_, err := q.db.ExecContext(ctx, updateVerifiedAt, emailHash)
	return err
}

const userExists = `-- name: UserExists :one
select exists(select 1 from users where id = $1 and deleted_at is null) as exists
`

func (q *Queries) UserExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRowContext(ctx, userExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
